{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /data/apps/cuda/11.3\nNVCC: Cuda compilation tools, release 11.3, V11.3.58\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.13.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.1\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6\nMMClassification: 0.25.0+3d4f80d", "seed": 148153025, "mmcls_version": "0.25.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(\n        type='SVT',\n        arch='base',\n        in_channels=3,\n        out_indices=(3, ),\n        qkv_bias=True,\n        norm_cfg=dict(type='LN'),\n        norm_after_stage=[False, False, False, True],\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=5,\n        in_channels=768,\n        loss=dict(\n            type='LabelSmoothLoss', label_smooth_val=0.1, mode='original'),\n        cal_acc=False,\n        topk=(1, )),\n    init_cfg=[\n        dict(type='TruncNormal', layer='Linear', std=0.02, bias=0.0),\n        dict(type='Constant', layer='LayerNorm', val=1.0, bias=0.0)\n    ],\n    train_cfg=dict(augments=[\n        dict(type='BatchMixup', alpha=0.8, num_classes=5, prob=0.5),\n        dict(type='BatchCutMix', alpha=1.0, num_classes=5, prob=0.5)\n    ]))\nrand_increasing_policies = [\n    dict(type='AutoContrast'),\n    dict(type='Equalize'),\n    dict(type='Invert'),\n    dict(type='Rotate', magnitude_key='angle', magnitude_range=(0, 30)),\n    dict(type='Posterize', magnitude_key='bits', magnitude_range=(4, 0)),\n    dict(type='Solarize', magnitude_key='thr', magnitude_range=(256, 0)),\n    dict(\n        type='SolarizeAdd',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 110)),\n    dict(\n        type='ColorTransform',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.9)),\n    dict(type='Contrast', magnitude_key='magnitude', magnitude_range=(0, 0.9)),\n    dict(\n        type='Brightness', magnitude_key='magnitude',\n        magnitude_range=(0, 0.9)),\n    dict(\n        type='Sharpness', magnitude_key='magnitude', magnitude_range=(0, 0.9)),\n    dict(\n        type='Shear',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.3),\n        direction='horizontal'),\n    dict(\n        type='Shear',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.3),\n        direction='vertical'),\n    dict(\n        type='Translate',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.45),\n        direction='horizontal'),\n    dict(\n        type='Translate',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.45),\n        direction='vertical')\n]\ndataset_type = 'ImageNet'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='RandomResizedCrop',\n        size=224,\n        backend='pillow',\n        interpolation='bicubic'),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='RandAugment',\n        policies=[\n            dict(type='AutoContrast'),\n            dict(type='Equalize'),\n            dict(type='Invert'),\n            dict(\n                type='Rotate', magnitude_key='angle', magnitude_range=(0, 30)),\n            dict(\n                type='Posterize', magnitude_key='bits',\n                magnitude_range=(4, 0)),\n            dict(\n                type='Solarize', magnitude_key='thr',\n                magnitude_range=(256, 0)),\n            dict(\n                type='SolarizeAdd',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 110)),\n            dict(\n                type='ColorTransform',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Contrast',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Brightness',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Sharpness',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Shear',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.3),\n                direction='horizontal'),\n            dict(\n                type='Shear',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.3),\n                direction='vertical'),\n            dict(\n                type='Translate',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.45),\n                direction='horizontal'),\n            dict(\n                type='Translate',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.45),\n                direction='vertical')\n        ],\n        num_policies=2,\n        total_level=10,\n        magnitude_level=9,\n        magnitude_std=0.5,\n        hparams=dict(pad_val=[104, 116, 124], interpolation='bicubic')),\n    dict(\n        type='RandomErasing',\n        erase_prob=0.25,\n        mode='rand',\n        min_area_ratio=0.02,\n        max_area_ratio=0.3333333333333333,\n        fill_color=[103.53, 116.28, 123.675],\n        fill_std=[57.375, 57.12, 58.395]),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='Resize',\n        size=(256, -1),\n        backend='pillow',\n        interpolation='bicubic'),\n    dict(type='CenterCrop', crop_size=224),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=64,\n    workers_per_gpu=2,\n    train=dict(\n        type='ImageNet',\n        data_prefix='data/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='RandomResizedCrop',\n                size=224,\n                backend='pillow',\n                interpolation='bicubic'),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='RandAugment',\n                policies=[\n                    dict(type='AutoContrast'),\n                    dict(type='Equalize'),\n                    dict(type='Invert'),\n                    dict(\n                        type='Rotate',\n                        magnitude_key='angle',\n                        magnitude_range=(0, 30)),\n                    dict(\n                        type='Posterize',\n                        magnitude_key='bits',\n                        magnitude_range=(4, 0)),\n                    dict(\n                        type='Solarize',\n                        magnitude_key='thr',\n                        magnitude_range=(256, 0)),\n                    dict(\n                        type='SolarizeAdd',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 110)),\n                    dict(\n                        type='ColorTransform',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Contrast',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Brightness',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Sharpness',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Shear',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.3),\n                        direction='horizontal'),\n                    dict(\n                        type='Shear',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.3),\n                        direction='vertical'),\n                    dict(\n                        type='Translate',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.45),\n                        direction='horizontal'),\n                    dict(\n                        type='Translate',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.45),\n                        direction='vertical')\n                ],\n                num_policies=2,\n                total_level=10,\n                magnitude_level=9,\n                magnitude_std=0.5,\n                hparams=dict(pad_val=[104, 116, 124],\n                             interpolation='bicubic')),\n            dict(\n                type='RandomErasing',\n                erase_prob=0.25,\n                mode='rand',\n                min_area_ratio=0.02,\n                max_area_ratio=0.3333333333333333,\n                fill_color=[103.53, 116.28, 123.675],\n                fill_std=[57.375, 57.12, 58.395]),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ],\n        ann_file='data/train.txt',\n        classes='data/classes.txt'),\n    val=dict(\n        type='ImageNet',\n        data_prefix='data/val',\n        ann_file='data/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='Resize',\n                size=(256, -1),\n                backend='pillow',\n                interpolation='bicubic'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ],\n        classes='data/classes.txt'),\n    test=dict(\n        type='ImageNet',\n        data_prefix='data/val',\n        ann_file='data/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='Resize',\n                size=(256, -1),\n                backend='pillow',\n                interpolation='bicubic'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ],\n        classes='data/classes.txt'))\nevaluation = dict(\n    interval=1, metric='accuracy', metric_options=dict(topk=(1, )))\nparamwise_cfg = dict(\n    norm_decay_mult=0.0,\n    bias_decay_mult=0.0,\n    custom_keys=dict({\n        '.absolute_pos_embed': dict(decay_mult=0.0),\n        '.relative_position_bias_table': dict(decay_mult=0.0)\n    }),\n    _delete=True)\noptimizer = dict(\n    type='AdamW',\n    lr=6.25e-05,\n    weight_decay=0.05,\n    eps=1e-08,\n    betas=(0.9, 0.999),\n    paramwise_cfg=dict(\n        norm_decay_mult=0.0,\n        bias_decay_mult=0.0,\n        custom_keys=dict({\n            '.absolute_pos_embed': dict(decay_mult=0.0),\n            '.relative_position_bias_table': dict(decay_mult=0.0)\n        }),\n        _delete=True))\noptimizer_config = dict(grad_clip=dict(max_norm=5.0))\nlr_config = dict(\n    policy='CosineAnnealing',\n    by_epoch=True,\n    min_lr_ratio=0.001,\n    warmup='linear',\n    warmup_ratio=0.0001,\n    warmup_iters=5,\n    warmup_by_epoch=True)\nrunner = dict(type='EpochBasedRunner', max_epochs=100)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=100,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained/twins-svt-base_3rdparty_8xb128_in1k_20220126-e31cc8e9.pth'\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = 'work/work1_twins_1xb64_flower5_top1'\ngpu_ids = [0]\ndevice = 'cuda'\nseed = 148153025\n", "CLASSES": ["daisy", "dandelion", "rose", "sunflower", "tulip"]}
{"mode": "val", "epoch": 1, "iter": 9, "lr": 1e-05, "accuracy_top-1": 60.31469}
{"mode": "val", "epoch": 2, "iter": 9, "lr": 2e-05, "accuracy_top-1": 91.78322}
{"mode": "val", "epoch": 3, "iter": 9, "lr": 4e-05, "accuracy_top-1": 96.32867}
{"mode": "val", "epoch": 4, "iter": 9, "lr": 5e-05, "accuracy_top-1": 95.62937}
{"mode": "val", "epoch": 5, "iter": 9, "lr": 6e-05, "accuracy_top-1": 96.67832}
{"mode": "val", "epoch": 6, "iter": 9, "lr": 6e-05, "accuracy_top-1": 96.85315}
{"mode": "val", "epoch": 7, "iter": 9, "lr": 6e-05, "accuracy_top-1": 97.2028}
{"mode": "val", "epoch": 8, "iter": 9, "lr": 6e-05, "accuracy_top-1": 96.85315}
{"mode": "val", "epoch": 9, "iter": 9, "lr": 6e-05, "accuracy_top-1": 97.37762}
{"mode": "val", "epoch": 10, "iter": 9, "lr": 6e-05, "accuracy_top-1": 96.85315}
{"mode": "val", "epoch": 11, "iter": 9, "lr": 6e-05, "accuracy_top-1": 97.72727}
{"mode": "val", "epoch": 12, "iter": 9, "lr": 6e-05, "accuracy_top-1": 97.72727}
{"mode": "val", "epoch": 13, "iter": 9, "lr": 6e-05, "accuracy_top-1": 97.9021}
{"mode": "val", "epoch": 14, "iter": 9, "lr": 6e-05, "accuracy_top-1": 98.25175}
{"mode": "val", "epoch": 15, "iter": 9, "lr": 6e-05, "accuracy_top-1": 97.2028}
{"mode": "val", "epoch": 16, "iter": 9, "lr": 6e-05, "accuracy_top-1": 97.9021}
{"mode": "val", "epoch": 17, "iter": 9, "lr": 6e-05, "accuracy_top-1": 98.25175}
{"mode": "val", "epoch": 18, "iter": 9, "lr": 6e-05, "accuracy_top-1": 97.72727}
{"mode": "val", "epoch": 19, "iter": 9, "lr": 6e-05, "accuracy_top-1": 97.9021}
{"mode": "val", "epoch": 20, "iter": 9, "lr": 6e-05, "accuracy_top-1": 97.9021}
{"mode": "val", "epoch": 21, "iter": 9, "lr": 6e-05, "accuracy_top-1": 98.42657}
{"mode": "val", "epoch": 22, "iter": 9, "lr": 6e-05, "accuracy_top-1": 97.9021}
